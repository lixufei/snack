Ruby 大概
一、哈希 <==> Hash
  1.创建hash的方式两种
  第一种：
  hash = {
  key1 => value1,
  key2 => value2,
  key3 => value3
  } #preferred,那么升级到2.2.0,更简单喜欢的方式是symbol的方式
  hash = {
  key1: value1,
  key2: value2,
  key3: value3
  }
  第二种：
  pets = Hash.new  #也可以设定默认值pets = Hash.new("pupi")
  2.往hash中增加键值对
  pets["name"] = "Peter"
  3.得到相应的key的value
  puts pets["name"]
  4.得到所有键值对
  pets.each { |x, y| puts "#{x}: #{y}" }
  或者
  pets.collect { |x, y| puts "#{x}: #{y}" }
  或者
  pets.map { |x, y| puts "#{x}: #{y}" }
  5.将一个字符串转化为symbol
  "string".to_sym
  6.过滤
  filter_pets=pets.select {|k, v| v.is_a? Integer} #等号两边不能加空格
  此时，你已经发现，在ruby中总有很多种方式来表达同一个意思。
二、比较运算符<=>,它的返回值有三个：0，-1，1
	1 <=> 2   #-1
	1 <=> 1   #0
	1 <=> 0   #1
	一个排序的case：
	books = ["Charlie and the Chocolate Factory", "War and Peace", "Utopia", "A Brief History of Time", "A Wrinkle in Time"]
	in ascending 排序
	books.sort! { |firstBook, secondBook| firstBook <=> secondBook }
	in descending 排序
	books.sort! { |firstBook, secondBook| secondBook <=> firstBook }
三、从console输入
    i=gets.chomp  #i.to_i，将输入转化为整数
四、case
	case i
	when "a"
	then puts "sfsafd"
	when "b"
	then 
	   if true
	       puts "fsfsdaf"
	   elsif condition
	       puts "jflajksdla"
	   else
	       puts "fsdfa"
	   end
	else
	  do sth
	end
五、一行的事
    puts "fjslkdfla" if true
	puts "fsdfs" unless false
六、给不确定的值赋默认值
    my_name ||= "lixufei"
七、给数组增加一个元素
    [1,2,3,4] << 5
八、得到前几个素数（虽然我觉得这个知识点极度没用）
	prime = Prime.instance
  	prime.first n
九、yield
    一般情况下，我们的参数是object，但如果想要传入代码块呢？
    一个case：
    def double(num)
    	yield(5)
	end

	double(3) {|n| n*2}
	方法double传入了3这个参数，然而我们处理的是{|n| n*2}，注意此时的n为5.所以double方法的结果为10.
十、Proc，不用多次重复写实现，只需写一次，多次调用
    上case：
    floats = [1.2, 3.45, 0.91, 7.727, 11.42, 482.911]

	round_down=Proc.new {|f| (f-0.5).round}

	ints = floats.collect(&round_down)
十一、Lambda
	def batman_ironman_proc
	  victor = Proc.new { return "Batman will win!" }
	  victor.call
	  "Iron Man will win!"
	end

	puts batman_ironman_proc # "Batman will win!"

	def batman_ironman_lambda
	  victor = lambda { return "Batman will win!" }
	  victor.call
	  "Iron Man will win!"
	end

	puts batman_ironman_lambda   # "Iron Man will win!"
十二、Inheritance,类似java的继承，只不过表达方式是用 <
	class Dragon < Person; end
十三、public and private
    class Dragon
    	public
    	def public_method(a,b)
    	  do sth....
    	end

    	private
    	def private_method(a,b)
    	  do sth....
    	end
    	def private_method(a,b)
    	  do sth1....
    	end
    end
十四、attr_reader, attr_writer和attr_accessor
	如果没有这些我们可能需要专门写一个方法来访问实例变量(@instance).
	case:

	class Person
	    attr_reader :name
	    attr_accessor :name
	  def initialize(name, job)
	    @name = name
	    @job = job
	  end
	end

	person=Person.new("fsdf","fasdfa")
	person.name   #此时可以直接访问name属性，如果没有 attr_reader :name，我们必须再写一个方法来访问name
	person.job
十五、Module实现了类似于多继承的功能
 	两大好处：
 	1）类似命名空间namespace
 	2）mixin
 	case：
 	module Action
	  def jump
	    @distance = rand(4) + 2
	    puts "I jumped forward #{@distance} feet!"
	  end
	end

	class Rabbit
	  include Action
	  attr_reader :name
	  def initialize(name)
	    @name = name
	  end
	end

	peter = Rabbit.new("Peter")
	peter.jump
十六、extend将module提升到class的级别直接调用，上代码
	module ThePresent
	  def now
	    puts "It's #{Time.new.hour > 12 ? Time.new.hour - 12 : Time.new.hour}:#{Time.new.min} #{Time.new.hour > 12 ? 'PM' : 'AM'} (GMT)."
	  end
	end

	class TheHereAnd
	  extend ThePresent
	end

	TheHereAnd.now




