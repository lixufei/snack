var arr=[];   //效率更高
var arr1=new Array(10);
var arr2=new Array(1,2,3,’hello’,null);
Array.isArray(arr2);

字符串生成数组：split（” "）

深复制 vs 浅复制
浅复制：只是为被复制的数组创建了新的引用， 当原引用的数组发生变化，新的引用也会感应到。
var nums = [];
for (var i = 0; i < 100; ++i) {
nums[i] = i+1;
}
var samenums = nums;
nums[0] = 400;
print(samenums[0]); // 显示400

深复制：写一个方法将原数组中每一项都拷贝到新数组中。
function copy(arr1, arr2) {
for (var i = 0; i < arr1.length; ++i) {
arr2[i] = arr1[i];
}
}

var nums = [];
for (var i = 0; i < 100; ++i) {
nums[i] = i+1;
}
var samenums = [];
copy(nums, samenums);
nums[0] = 400;
print(samenums[0]); // 显示 1

存取元素：返回目标数组的某种变体
1.indexOf()：有就返回索引，没有就返回-1.如果有多个相同的元素返回第一个的索引，lastIndexOf()，返回最后一个的索引。
note：deadline()方法使输入
2.join()和toString()都是将数组转化为字符串并用逗号隔开各元素，pirnt打印数组自动调用toString()
3.concat()和splice()
concat()作为参数的数组连接到调用concat()方法的后面；
splice() 第一个参数是数组索引，第二个是要截取的长度；PS:splice() 还有其他用法

可变函数：
1.push()和unshift()
push()在数组末尾添加元素，可以添加多个。PS：也可以用length添加。
var nums = [1,2,3,4,5];
print(nums); // 1,2,3,4,5
nums.push(6);
print(nums); // 1,2,3,4,5,6

var nums = [1,2,3,4,5];
print(nums); // 1,2,3,4,5
nums[nums.length] = 6;
print(nums); // 1,2,3,4,5,6
unshift() 在数组开头添加元素，可以添加多个。
var nums = [2,3,4,5];
print(nums); // 2,3,4,5
var newnum = 1;
nums.unshift(newnum);
print(nums); // 1,2,3,4,5
nums = [3,4,5];
nums.unshift(newnum,1,2);
print(nums); // 1, 1， 2,3,4,5

数组中间任意位置添加或删除
splice()
第一个参数为索引，从哪个元素开始；
第二个参数是要删除的个数（如果要添加，该参数为0）
如果是添加，后面几个参数是要添加的元素。

var nums = [1,2,3,7,8,9];
var newElements = [4,5,6];
nums.splice(3,0,newElements);   //或者nums.splice(3,0,4,5,6)
print(nums); // 1,2,3,4,5,6,7,8,9

var nums = [1,2,3,100,200,300,400,4,5];
nums.splice(3,4);
print(nums); // 1,2,3,4,5

排序
1.reverse  //用于反转数组
2.sort()  //对字符串数组，按首字母排序
   PS: 对于数字类型数组来说，也按字符串来类型排序，但也有办法按数字排序，
function compare(num1, num2) {
return num1 - num2;
}
var nums = [3,1,2,100,4,200];
nums.sort(compare); //或者 nums.sort(function(a, b){return b-a;});
print(nums); // 1,2,3,4,100,200

迭代器方法
一、不产生新数组
forEach()
function square(num) {
print(num, num * num);
}
var nums = [1,2,3,4,5,6,7,8,9,10];
nums.forEach(square);
every():返回值为布尔值每一个元素符合
function isEven(num) {
return num % 2 == 0;
}
var nums = [2,4,6,8,10];
var even = nums.every(isEven);
if (even) {
print("all numbers are even");
}
else {
print("not all numbers are even");
}
some():返回值为布尔值，只要有一个元素符合
function isEven(num) {
return num % 2 == 0;
}
var nums = [1,2,3,4,5,6,7,8,9,10];
var someEven = nums.some(isEven);
if (someEven) {
print("some numbers are even");
}
else {
print("no numbers are even");
}
nums = [1,3,5,7,9];
someEven = nums.some(isEven);
if (someEven) {
print("some numbers are even");
}
else {
print("no numbers are even");
}

******reduce():接收一个函数，返回一个值
function add(runningTotal, currentValue) {
return runningTotal + currentValue;
}
var nums = [1,2,3,4,5,6,7,8,9,10];
var sum = nums.reduce(add);
print(sum); // 显示55

过程如下：
add(1,2) -> 3
add(3,3) -> 6
add(6,4) -> 10
add(10,5) -> 15
add(15,6) -> 21
add(21,7) -> 28
add(28,8) -> 36
add(36,9) -> 45
add(45,10) -> 55
reduce也可以将字符串数组连成字符串
function concat(accumulatedString, item) {
return accumulatedString + item;
}
var words = ["the ", "quick ","brown ", "fox "];
数组 ｜ 25
var sentence = words.reduce(concat);
print(sentence); // 显示 "the quick brown fox"

reduceRight()从右到左执行，将字符串数组连成字符串反转
function concat(accumulatedString, item) {
return accumulatedString + item;
}
var words = ["the ", "quick ","brown ", "fox "];
var sentence = words.reduceRight(concat);
print(sentence); // 显示 "fox brown quick the"
二、产生新数组的方法
map()
function curve(grade) {
return grade += 5;
}
var grades = [77, 65, 81, 92, 83];
var newgrades = grades.map(curve);
print(newgrades); // 82, 70, 86, 97, 88

function first(word) {
return word[0];
}
var words = ["for","your","information"];
var acronym = words.map(first);
print(acronym.join("")); // 显示”fyi”,想想为啥不用toString()
filter()：与every()类似，但不返回boolean，返回符合条件的数组
function isEven(num) {
26 ｜ 第2 章
return num % 2 == 0;
}
function isOdd(num) {
return num % 2 != 0;
}
var nums = [];
for (var i = 0; i < 20; ++i) {
nums[i] = i+1;
}
var evens = nums.filter(isEven);
print("Even numbers: ");
print(evens);
var odds = nums.filter(isOdd);
print("Odd numbers: ");
print(odds);
该程序的执行结果如下：
Even numbers:
2,4,6,8,10,12,14,16,18,20
Odd numbers:
1,3,5,7,9,11,13,15,17,19
二维数组：
Array.matrix(numrow, numcol, initial)
var names = Array.matrix(3,3,"");
names[1][2] = "Joe";
print(names[1][2]); // display"Joe"
用一行代码创建：
var grades = [[89, 77, 78],[76, 82, 81],[91, 94, 89]];
print(grades[2][2]); // 显示 89

对参差不齐的函数：
var grades = [[89, 77],[76, 82, 81],[91, 94, 89, 99]];
var total = 0;
var average = 0.0;
for (var row = 0; row < grades.length; ++row) {
for (var col = 0; col < grades[row].length; ++col) {
total += grades[row][col];
}
average = total / grades[row].length;
print("Student " + parseInt(row+1) + " average: " + average.toFixed(2));
total = 0;
average = 0.0;
}
练习
2. 将一组单词存储在一个数组中，并按正序和倒序分别显示这些单词。
function displayaBC(a, b) {return a + ","+ b;}
var abc=["hello","world","best","I am"];
abc.reduce(displayaBC);  //正序
abc.reduceRight(displayaBC);  // 倒序
1. 创建一个记录学生成绩的对象，提供一个添加成绩的方法，以及一个显示学生平均成绩
的方法。
function studentScore() {
  this.score = [];
  this.addScore = addScore;
  this.average = average;
}

function addScore (studentScore) {
  this.score[this.score.length] = studentScore;
}

function average() {
  var avg = [];
  print("score1:", this.score);
  for(var i = 0; i < this.score.length; i++) {
    var total=0;
      for(var j = 0; j < this.score[i].length; j++){
        total += this.score[i][j];
      }
      avg.push((total / this.score[i].length).toFixed(2));
   }
   return avg;
}

var score1 = new studentScore();
score1.addScore([91,92]);
score1.addScore([91,92,93]);
print("score1:"+score1.score);
print("score2 average:"+score1.average());